{
  "version": "eosio::abi/1.1",
  "types": [],
  "structs": [{
      "name": "abi_hash",
      "base": "",
      "fields": [{
          "name": "owner",
          "type": "name"
        },{
          "name": "hash",
          "type": "checksum256"
        }
      ]
    },{
      "name": "authority",
      "base": "",
      "fields": [{
          "name": "threshold",
          "type": "uint32"
        },{
          "name": "keys",
          "type": "key_weight[]"
        },{
          "name": "accounts",
          "type": "permission_level_weight[]"
        },{
          "name": "waits",
          "type": "wait_weight[]"
        }
      ]
    },{
      "name": "bid_refund",
      "base": "",
      "fields": [{
          "name": "bidder",
          "type": "name"
        },{
          "name": "amount",
          "type": "asset"
        }
      ]
    },{
      "name": "bidname",
      "base": "",
      "fields": [{
          "name": "bidder",
          "type": "name"
        },{
          "name": "newname",
          "type": "name"
        },{
          "name": "bid",
          "type": "asset"
        }
      ]
    },{
      "name": "bidrefund",
      "base": "",
      "fields": [{
          "name": "bidder",
          "type": "name"
        },{
          "name": "newname",
          "type": "name"
        }
      ]
    },{
      "name": "block_header",
      "base": "",
      "fields": [{
          "name": "timestamp",
          "type": "uint32"
        },{
          "name": "producer",
          "type": "name"
        },{
          "name": "confirmed",
          "type": "uint16"
        },{
          "name": "previous",
          "type": "checksum256"
        },{
          "name": "transaction_mroot",
          "type": "checksum256"
        },{
          "name": "action_mroot",
          "type": "checksum256"
        },{
          "name": "schedule_version",
          "type": "uint32"
        },{
          "name": "new_producers",
          "type": "producer_schedule?"
        }
      ]
    },{
      "name": "blockchain_parameters",
      "base": "",
      "fields": [{
          "name": "max_block_net_usage",
          "type": "uint64"
        },{
          "name": "target_block_net_usage_pct",
          "type": "uint32"
        },{
          "name": "max_transaction_net_usage",
          "type": "uint32"
        },{
          "name": "base_per_transaction_net_usage",
          "type": "uint32"
        },{
          "name": "net_usage_leeway",
          "type": "uint32"
        },{
          "name": "context_free_discount_net_usage_num",
          "type": "uint32"
        },{
          "name": "context_free_discount_net_usage_den",
          "type": "uint32"
        },{
          "name": "max_block_cpu_usage",
          "type": "uint32"
        },{
          "name": "target_block_cpu_usage_pct",
          "type": "uint32"
        },{
          "name": "max_transaction_cpu_usage",
          "type": "uint32"
        },{
          "name": "min_transaction_cpu_usage",
          "type": "uint32"
        },{
          "name": "max_transaction_lifetime",
          "type": "uint32"
        },{
          "name": "deferred_trx_expiration_window",
          "type": "uint32"
        },{
          "name": "max_transaction_delay",
          "type": "uint32"
        },{
          "name": "max_inline_action_size",
          "type": "uint32"
        },{
          "name": "max_inline_action_depth",
          "type": "uint16"
        },{
          "name": "max_authority_depth",
          "type": "uint16"
        }
      ]
    },{
      "name": "buyram",
      "base": "",
      "fields": [{
          "name": "payer",
          "type": "name"
        },{
          "name": "receiver",
          "type": "name"
        },{
          "name": "quant",
          "type": "asset"
        }
      ]
    },{
      "name": "buyrambytes",
      "base": "",
      "fields": [{
          "name": "payer",
          "type": "name"
        },{
          "name": "receiver",
          "type": "name"
        },{
          "name": "bytes",
          "type": "uint32"
        }
      ]
    },{
      "name": "buyrex",
      "base": "",
      "fields": [{
          "name": "from",
          "type": "name"
        },{
          "name": "amount",
          "type": "asset"
        }
      ]
    },{
      "name": "canceldelay",
      "base": "",
      "fields": [{
          "name": "canceling_auth",
          "type": "permission_level"
        },{
          "name": "trx_id",
          "type": "checksum256"
        }
      ]
    },{
      "name": "claimrewards",
      "base": "",
      "fields": [{
          "name": "owner",
          "type": "name"
        }
      ]
    },{
      "name": "closerex",
      "base": "",
      "fields": [{
          "name": "owner",
          "type": "name"
        }
      ]
    },{
      "name": "cnclrexorder",
      "base": "",
      "fields": [{
          "name": "owner",
          "type": "name"
        }
      ]
    },{
      "name": "connector",
      "base": "",
      "fields": [{
          "name": "balance",
          "type": "asset"
        },{
          "name": "weight",
          "type": "float64"
        }
      ]
    },{
      "name": "consolidate",
      "base": "",
      "fields": [{
          "name": "owner",
          "type": "name"
        }
      ]
    },{
      "name": "defcpuloan",
      "base": "",
      "fields": [{
          "name": "from",
          "type": "name"
        },{
          "name": "loan_num",
          "type": "uint64"
        },{
          "name": "amount",
          "type": "asset"
        }
      ]
    },{
      "name": "defnetloan",
      "base": "",
      "fields": [{
          "name": "from",
          "type": "name"
        },{
          "name": "loan_num",
          "type": "uint64"
        },{
          "name": "amount",
          "type": "asset"
        }
      ]
    },{
      "name": "delegatebw",
      "base": "",
      "fields": [{
          "name": "from",
          "type": "name"
        },{
          "name": "receiver",
          "type": "name"
        },{
          "name": "stake_net_quantity",
          "type": "asset"
        },{
          "name": "stake_cpu_quantity",
          "type": "asset"
        },{
          "name": "transfer",
          "type": "bool"
        }
      ]
    },{
      "name": "delegated_bandwidth",
      "base": "",
      "fields": [{
          "name": "from",
          "type": "name"
        },{
          "name": "to",
          "type": "name"
        },{
          "name": "net_weight",
          "type": "asset"
        },{
          "name": "cpu_weight",
          "type": "asset"
        }
      ]
    },{
      "name": "deleteauth",
      "base": "",
      "fields": [{
          "name": "account",
          "type": "name"
        },{
          "name": "permission",
          "type": "name"
        }
      ]
    },{
      "name": "deposit",
      "base": "",
      "fields": [{
          "name": "owner",
          "type": "name"
        },{
          "name": "amount",
          "type": "asset"
        }
      ]
    },{
      "name": "eosio_global_state",
      "base": "blockchain_parameters",
      "fields": [{
          "name": "max_ram_size",
          "type": "uint64"
        },{
          "name": "total_ram_bytes_reserved",
          "type": "uint64"
        },{
          "name": "total_ram_stake",
          "type": "int64"
        },{
          "name": "last_producer_schedule_update",
          "type": "block_timestamp_type"
        },{
          "name": "last_pervote_bucket_fill",
          "type": "time_point"
        },{
          "name": "pervote_bucket",
          "type": "int64"
        },{
          "name": "perblock_bucket",
          "type": "int64"
        },{
          "name": "total_unpaid_blocks",
          "type": "uint32"
        },{
          "name": "total_activated_stake",
          "type": "int64"
        },{
          "name": "thresh_activated_stake_time",
          "type": "time_point"
        },{
          "name": "last_producer_schedule_size",
          "type": "uint16"
        },{
          "name": "total_producer_vote_weight",
          "type": "float64"
        },{
          "name": "last_name_close",
          "type": "block_timestamp_type"
        }
      ]
    },{
      "name": "eosio_global_state2",
      "base": "",
      "fields": [{
          "name": "new_ram_per_block",
          "type": "uint16"
        },{
          "name": "last_ram_increase",
          "type": "block_timestamp_type"
        },{
          "name": "last_block_num",
          "type": "block_timestamp_type"
        },{
          "name": "total_producer_votepay_share",
          "type": "float64"
        },{
          "name": "revision",
          "type": "uint8"
        }
      ]
    },{
      "name": "eosio_global_state3",
      "base": "",
      "fields": [{
          "name": "last_vpay_state_update",
          "type": "time_point"
        },{
          "name": "total_vpay_share_change_rate",
          "type": "float64"
        }
      ]
    },{
      "name": "eosio_guaranteed_min_res",
      "base": "",
      "fields": [{
          "name": "ram",
          "type": "uint32"
        },{
          "name": "cpu",
          "type": "uint32"
        },{
          "name": "net",
          "type": "uint32"
        }
      ]
    },{
      "name": "exchange_state",
      "base": "",
      "fields": [{
          "name": "supply",
          "type": "asset"
        },{
          "name": "base",
          "type": "connector"
        },{
          "name": "quote",
          "type": "connector"
        }
      ]
    },{
      "name": "fundcpuloan",
      "base": "",
      "fields": [{
          "name": "from",
          "type": "name"
        },{
          "name": "loan_num",
          "type": "uint64"
        },{
          "name": "payment",
          "type": "asset"
        }
      ]
    },{
      "name": "fundnetloan",
      "base": "",
      "fields": [{
          "name": "from",
          "type": "name"
        },{
          "name": "loan_num",
          "type": "uint64"
        },{
          "name": "payment",
          "type": "asset"
        }
      ]
    },{
      "name": "init",
      "base": "",
      "fields": [{
          "name": "version",
          "type": "varuint32"
        },{
          "name": "core",
          "type": "symbol"
        }
      ]
    },{
      "name": "key_weight",
      "base": "",
      "fields": [{
          "name": "key",
          "type": "public_key"
        },{
          "name": "weight",
          "type": "uint16"
        }
      ]
    },{
      "name": "linkauth",
      "base": "",
      "fields": [{
          "name": "account",
          "type": "name"
        },{
          "name": "code",
          "type": "name"
        },{
          "name": "type",
          "type": "name"
        },{
          "name": "requirement",
          "type": "name"
        }
      ]
    },{
      "name": "mvfrsavings",
      "base": "",
      "fields": [{
          "name": "owner",
          "type": "name"
        },{
          "name": "rex",
          "type": "asset"
        }
      ]
    },{
      "name": "mvtosavings",
      "base": "",
      "fields": [{
          "name": "owner",
          "type": "name"
        },{
          "name": "rex",
          "type": "asset"
        }
      ]
    },{
      "name": "name_bid",
      "base": "",
      "fields": [{
          "name": "newname",
          "type": "name"
        },{
          "name": "high_bidder",
          "type": "name"
        },{
          "name": "high_bid",
          "type": "int64"
        },{
          "name": "last_bid_time",
          "type": "time_point"
        }
      ]
    },{
      "name": "namelist",
      "base": "",
      "fields": [{
          "name": "list",
          "type": "name"
        },{
          "name": "action",
          "type": "name"
        },{
          "name": "names",
          "type": "name[]"
        }
      ]
    },{
      "name": "newaccount",
      "base": "",
      "fields": [{
          "name": "creator",
          "type": "name"
        },{
          "name": "newact",
          "type": "name"
        },{
          "name": "owner",
          "type": "authority"
        },{
          "name": "active",
          "type": "authority"
        }
      ]
    },{
      "name": "onblock",
      "base": "",
      "fields": [{
          "name": "header",
          "type": "block_header"
        }
      ]
    },{
      "name": "onerror",
      "base": "",
      "fields": [{
          "name": "sender_id",
          "type": "uint128"
        },{
          "name": "sent_trx",
          "type": "bytes"
        }
      ]
    },{
      "name": "pair_time_point_sec_int64",
      "base": "",
      "fields": [{
          "name": "first",
          "type": "time_point_sec"
        },{
          "name": "second",
          "type": "int64"
        }
      ]
    },{
      "name": "permission_level",
      "base": "",
      "fields": [{
          "name": "actor",
          "type": "name"
        },{
          "name": "permission",
          "type": "name"
        }
      ]
    },{
      "name": "permission_level_weight",
      "base": "",
      "fields": [{
          "name": "permission",
          "type": "permission_level"
        },{
          "name": "weight",
          "type": "uint16"
        }
      ]
    },{
      "name": "producer_info",
      "base": "",
      "fields": [{
          "name": "owner",
          "type": "name"
        },{
          "name": "total_votes",
          "type": "float64"
        },{
          "name": "producer_key",
          "type": "public_key"
        },{
          "name": "is_active",
          "type": "bool"
        },{
          "name": "url",
          "type": "string"
        },{
          "name": "unpaid_blocks",
          "type": "uint32"
        },{
          "name": "last_claim_time",
          "type": "time_point"
        },{
          "name": "location",
          "type": "uint16"
        }
      ]
    },{
      "name": "producer_info2",
      "base": "",
      "fields": [{
          "name": "owner",
          "type": "name"
        },{
          "name": "votepay_share",
          "type": "float64"
        },{
          "name": "last_votepay_share_update",
          "type": "time_point"
        }
      ]
    },{
      "name": "producer_key",
      "base": "",
      "fields": [{
          "name": "producer_name",
          "type": "name"
        },{
          "name": "block_signing_key",
          "type": "public_key"
        }
      ]
    },{
      "name": "producer_schedule",
      "base": "",
      "fields": [{
          "name": "version",
          "type": "uint32"
        },{
          "name": "producers",
          "type": "producer_key[]"
        }
      ]
    },{
      "name": "refund",
      "base": "",
      "fields": [{
          "name": "owner",
          "type": "name"
        }
      ]
    },{
      "name": "refund_request",
      "base": "",
      "fields": [{
          "name": "owner",
          "type": "name"
        },{
          "name": "request_time",
          "type": "time_point_sec"
        },{
          "name": "net_amount",
          "type": "asset"
        },{
          "name": "cpu_amount",
          "type": "asset"
        }
      ]
    },{
      "name": "regproducer",
      "base": "",
      "fields": [{
          "name": "producer",
          "type": "name"
        },{
          "name": "producer_key",
          "type": "public_key"
        },{
          "name": "url",
          "type": "string"
        },{
          "name": "location",
          "type": "uint16"
        }
      ]
    },{
      "name": "regproxy",
      "base": "",
      "fields": [{
          "name": "proxy",
          "type": "name"
        },{
          "name": "isproxy",
          "type": "bool"
        }
      ]
    },{
      "name": "rentcpu",
      "base": "",
      "fields": [{
          "name": "from",
          "type": "name"
        },{
          "name": "receiver",
          "type": "name"
        },{
          "name": "loan_payment",
          "type": "asset"
        },{
          "name": "loan_fund",
          "type": "asset"
        }
      ]
    },{
      "name": "rentnet",
      "base": "",
      "fields": [{
          "name": "from",
          "type": "name"
        },{
          "name": "receiver",
          "type": "name"
        },{
          "name": "loan_payment",
          "type": "asset"
        },{
          "name": "loan_fund",
          "type": "asset"
        }
      ]
    },{
      "name": "rex_balance",
      "base": "",
      "fields": [{
          "name": "version",
          "type": "uint8"
        },{
          "name": "owner",
          "type": "name"
        },{
          "name": "vote_stake",
          "type": "asset"
        },{
          "name": "rex_balance",
          "type": "asset"
        },{
          "name": "matured_rex",
          "type": "int64"
        },{
          "name": "rex_maturities",
          "type": "pair_time_point_sec_int64[]"
        }
      ]
    },{
      "name": "rex_fund",
      "base": "",
      "fields": [{
          "name": "version",
          "type": "uint8"
        },{
          "name": "owner",
          "type": "name"
        },{
          "name": "balance",
          "type": "asset"
        }
      ]
    },{
      "name": "rex_loan",
      "base": "",
      "fields": [{
          "name": "version",
          "type": "uint8"
        },{
          "name": "from",
          "type": "name"
        },{
          "name": "receiver",
          "type": "name"
        },{
          "name": "payment",
          "type": "asset"
        },{
          "name": "balance",
          "type": "asset"
        },{
          "name": "total_staked",
          "type": "asset"
        },{
          "name": "loan_num",
          "type": "uint64"
        },{
          "name": "expiration",
          "type": "time_point"
        }
      ]
    },{
      "name": "rex_order",
      "base": "",
      "fields": [{
          "name": "version",
          "type": "uint8"
        },{
          "name": "owner",
          "type": "name"
        },{
          "name": "rex_requested",
          "type": "asset"
        },{
          "name": "proceeds",
          "type": "asset"
        },{
          "name": "stake_change",
          "type": "asset"
        },{
          "name": "order_time",
          "type": "time_point"
        },{
          "name": "is_open",
          "type": "bool"
        }
      ]
    },{
      "name": "rex_pool",
      "base": "",
      "fields": [{
          "name": "version",
          "type": "uint8"
        },{
          "name": "total_lent",
          "type": "asset"
        },{
          "name": "total_unlent",
          "type": "asset"
        },{
          "name": "total_rent",
          "type": "asset"
        },{
          "name": "total_lendable",
          "type": "asset"
        },{
          "name": "total_rex",
          "type": "asset"
        },{
          "name": "namebid_proceeds",
          "type": "asset"
        },{
          "name": "loan_num",
          "type": "uint64"
        }
      ]
    },{
      "name": "rexexec",
      "base": "",
      "fields": [{
          "name": "user",
          "type": "name"
        },{
          "name": "max",
          "type": "uint16"
        }
      ]
    },{
      "name": "rmvproducer",
      "base": "",
      "fields": [{
          "name": "producer",
          "type": "name"
        }
      ]
    },{
      "name": "sellram",
      "base": "",
      "fields": [{
          "name": "account",
          "type": "name"
        },{
          "name": "bytes",
          "type": "int64"
        }
      ]
    },{
      "name": "sellrex",
      "base": "",
      "fields": [{
          "name": "from",
          "type": "name"
        },{
          "name": "rex",
          "type": "asset"
        }
      ]
    },{
      "name": "setabi",
      "base": "",
      "fields": [{
          "name": "account",
          "type": "name"
        },{
          "name": "abi",
          "type": "bytes"
        }
      ]
    },{
      "name": "setacctcpu",
      "base": "",
      "fields": [{
          "name": "account",
          "type": "name"
        },{
          "name": "cpu_weight",
          "type": "int64?"
        }
      ]
    },{
      "name": "setacctnet",
      "base": "",
      "fields": [{
          "name": "account",
          "type": "name"
        },{
          "name": "net_weight",
          "type": "int64?"
        }
      ]
    },{
      "name": "setacctram",
      "base": "",
      "fields": [{
          "name": "account",
          "type": "name"
        },{
          "name": "ram_bytes",
          "type": "int64?"
        }
      ]
    },{
      "name": "setalimits",
      "base": "",
      "fields": [{
          "name": "account",
          "type": "name"
        },{
          "name": "ram_bytes",
          "type": "int64"
        },{
          "name": "net_weight",
          "type": "int64"
        },{
          "name": "cpu_weight",
          "type": "int64"
        }
      ]
    },{
      "name": "setcode",
      "base": "",
      "fields": [{
          "name": "account",
          "type": "name"
        },{
          "name": "vmtype",
          "type": "uint8"
        },{
          "name": "vmversion",
          "type": "uint8"
        },{
          "name": "code",
          "type": "bytes"
        }
      ]
    },{
      "name": "setguaminres",
      "base": "",
      "fields": [{
          "name": "ram",
          "type": "uint32"
        },{
          "name": "cpu",
          "type": "uint32"
        },{
          "name": "net",
          "type": "uint32"
        }
      ]
    },{
      "name": "setparams",
      "base": "",
      "fields": [{
          "name": "params",
          "type": "blockchain_parameters"
        }
      ]
    },{
      "name": "setpriv",
      "base": "",
      "fields": [{
          "name": "account",
          "type": "name"
        },{
          "name": "is_priv",
          "type": "uint8"
        }
      ]
    },{
      "name": "setram",
      "base": "",
      "fields": [{
          "name": "max_ram_size",
          "type": "uint64"
        }
      ]
    },{
      "name": "setramrate",
      "base": "",
      "fields": [{
          "name": "bytes_per_block",
          "type": "uint16"
        }
      ]
    },{
      "name": "setrex",
      "base": "",
      "fields": [{
          "name": "balance",
          "type": "asset"
        }
      ]
    },{
      "name": "undelegatebw",
      "base": "",
      "fields": [{
          "name": "from",
          "type": "name"
        },{
          "name": "receiver",
          "type": "name"
        },{
          "name": "unstake_net_quantity",
          "type": "asset"
        },{
          "name": "unstake_cpu_quantity",
          "type": "asset"
        }
      ]
    },{
      "name": "unlinkauth",
      "base": "",
      "fields": [{
          "name": "account",
          "type": "name"
        },{
          "name": "code",
          "type": "name"
        },{
          "name": "type",
          "type": "name"
        }
      ]
    },{
      "name": "unregprod",
      "base": "",
      "fields": [{
          "name": "producer",
          "type": "name"
        }
      ]
    },{
      "name": "unstaketorex",
      "base": "",
      "fields": [{
          "name": "owner",
          "type": "name"
        },{
          "name": "receiver",
          "type": "name"
        },{
          "name": "from_net",
          "type": "asset"
        },{
          "name": "from_cpu",
          "type": "asset"
        }
      ]
    },{
      "name": "updateauth",
      "base": "",
      "fields": [{
          "name": "account",
          "type": "name"
        },{
          "name": "permission",
          "type": "name"
        },{
          "name": "parent",
          "type": "name"
        },{
          "name": "auth",
          "type": "authority"
        }
      ]
    },{
      "name": "updaterex",
      "base": "",
      "fields": [{
          "name": "owner",
          "type": "name"
        }
      ]
    },{
      "name": "updtrevision",
      "base": "",
      "fields": [{
          "name": "revision",
          "type": "uint8"
        }
      ]
    },{
      "name": "user_resources",
      "base": "",
      "fields": [{
          "name": "owner",
          "type": "name"
        },{
          "name": "net_weight",
          "type": "asset"
        },{
          "name": "cpu_weight",
          "type": "asset"
        },{
          "name": "ram_bytes",
          "type": "int64"
        }
      ]
    },{
      "name": "voteproducer",
      "base": "",
      "fields": [{
          "name": "voter",
          "type": "name"
        },{
          "name": "proxy",
          "type": "name"
        },{
          "name": "producers",
          "type": "name[]"
        }
      ]
    },{
      "name": "voter_info",
      "base": "",
      "fields": [{
          "name": "owner",
          "type": "name"
        },{
          "name": "proxy",
          "type": "name"
        },{
          "name": "producers",
          "type": "name[]"
        },{
          "name": "staked",
          "type": "int64"
        },{
          "name": "last_vote_weight",
          "type": "float64"
        },{
          "name": "proxied_vote_weight",
          "type": "float64"
        },{
          "name": "is_proxy",
          "type": "bool"
        },{
          "name": "flags1",
          "type": "uint32"
        },{
          "name": "reserved2",
          "type": "uint32"
        },{
          "name": "reserved3",
          "type": "asset"
        }
      ]
    },{
      "name": "wait_weight",
      "base": "",
      "fields": [{
          "name": "wait_sec",
          "type": "uint32"
        },{
          "name": "weight",
          "type": "uint16"
        }
      ]
    },{
      "name": "withdraw",
      "base": "",
      "fields": [{
          "name": "owner",
          "type": "name"
        },{
          "name": "amount",
          "type": "asset"
        }
      ]
    }
  ],
  "actions": [{
      "name": "bidname",
      "type": "bidname",
      "ricardian_contract": "# Action - `{{ bidname }}`\n\n## Description\n\nThe `{{ bidname }}` action places a bid on a premium account name, in the knowledge that the high bid will purchase the name.\n\nAs an authorized party I {{ signer }} wish to bid on behalf of {{ bidder }} the amount of {{ bid }} toward purchase of the account name {{ newname }}.\n"
    },{
      "name": "bidrefund",
      "type": "bidrefund",
      "ricardian_contract": ""
    },{
      "name": "buyram",
      "type": "buyram",
      "ricardian_contract": "# Action - `{{ buyram }}`\n\n### Description\n\nThis action will attempt to reserve about {{quant}} worth of RAM on behalf of {{receiver}}. \n\n{{buyer}} authorizes this contract to transfer {{quant}} to buy RAM based upon the current price as determined by the market maker algorithm.\n\n{{buyer}} accepts that a 0.5% fee will be charged on the amount spent and that the actual RAM received may be slightly less than expected due to the approximations necessary to enable this service.\n{{buyer}} accepts that a 0.5% fee will be charged if and when they sell the RAM received.\n{{buyer}} accepts that rounding errors resulting from limits of computational precision may result in less RAM being allocated.\n{{buyer}} acknowledges that the supply of RAM may be increased at any time up to the limits of off-the-shelf computer equipment and that this may result in RAM selling for less than purchase price.\n{{buyer}} acknowledges that the price of RAM may increase or decrease over time according to supply and demand.\n{{buyer}} acknowledges that RAM is non-transferrable. \n{{buyer}} acknowledges RAM currently in use by their account cannot be sold until it is freed and that freeing RAM may be subject to terms of other contracts.\n\n"
    },{
      "name": "buyrambytes",
      "type": "buyrambytes",
      "ricardian_contract": "# Action - `{{ buyrambytes }}`\n\n### Description\n\nThis action will attempt to reserve about {{bytes}} bytes of RAM on behalf of {{receiver}}. \n\n{{buyer}} authorizes this contract to transfer sufficient EOS tokens to buy the RAM based upon the current price as determined by the market maker algorithm.\n\n{{buyer}} accepts that a 0.5% fee will be charged on the EOS spent and that the actual RAM received may be slightly less than requested due to the approximations necessary to enable this service.\n{{buyer}} accepts that a 0.5% fee will be charged if and when they sell the RAM received.\n{{buyer}} accepts that rounding errors resulting from limits of computational precision may result in less RAM being allocated.\n{{buyer}} acknowledges that the supply of RAM may be increased at any time up to the limits of off-the-shelf computer equipment and that this may result in RAM selling for less than purchase price.\n{{buyer}} acknowledges that the price of RAM may increase or decrease over time according to supply and demand.\n{{buyer}} acknowledges that RAM is non-transferable. \n{{buyer}} acknowledges RAM currently in use by their account cannot be sold until it is freed and that freeing RAM may be subject to terms of other contracts.\n\n"
    },{
      "name": "buyrex",
      "type": "buyrex",
      "ricardian_contract": "# Action - `buyrex`\n\n## Description\n\nThe `buyrex` action allows an account to buy REX in exchange for tokens taken out of the user's REX fund.\n\nAs an authorized party I {{ signer }} wish to buy REX on the account {{ from }} with the amount {{ amount }} EOS.\n\nI am aware of, and have fulfilled, all voting requirements needed to participate in the REX marketplace.\n"
    },{
      "name": "canceldelay",
      "type": "canceldelay",
      "ricardian_contract": "# Action - `{{ canceldelay }}`\n\n### Description\n\nThe `{{ canceldelay }}` action cancels an existing delayed transaction.\n\nAs an authorized party I {{ signer }} wish to invoke the authority of {{ canceling_auth }} to cancel the transaction with ID {{ trx_id }}.\n"
    },{
      "name": "claimrewards",
      "type": "claimrewards",
      "ricardian_contract": "# Action - `{{ claimrewards }}`\n\n## Description\n\nThe `{{ claimrewards }}` action allows a block producer (active or standby) to claim the system rewards due them for producing blocks and receiving votes.\n\nAs an authorized party I {{ signer }} wish to have the rewards earned by {{ owner }} deposited into the {{ owner }} account.\n"
    },{
      "name": "closerex",
      "type": "closerex",
      "ricardian_contract": "# Action - `closerex`\n\n## Description\n\nThe `closerex` action allows an account to delete unused REX-related database entries and frees occupied RAM associated with its storage.\n\nAs an authorized party, I {{ signer }}, wish to delete all unused REX-related database entries from the account {{ owner }}.\n\nI will not be able to succesfully call `closerex` unless all checks for CPU loans, NET loans or refunds pending refunds are still processing on the account {{ owner }}.\n"
    },{
      "name": "cnclrexorder",
      "type": "cnclrexorder",
      "ricardian_contract": "# Action - `cnclrexorder`\n\n## Description\n\nThe `cnclrexorder` action cancels a queued REX sell order if one exists for an account.\n\nAs an authorized party I, {{ signer }}, wish to cancel any unfilled and queued REX sell orders that exist for the account {{ owner }}. \n"
    },{
      "name": "consolidate",
      "type": "consolidate",
      "ricardian_contract": " # Action - `consolidate`\n \n ## Description\n \nThe `consolidate` action will consolidate all REX maturity buckets for an account into one that matures 4 days from 00:00 UTC.\n \nAs an authorized party I, {{ signer }}, wish to consolidate any open REX maturity buckets for the account {{ owner }} into one that matures 4 days from the following 00:00 UTC.\n"
    },{
      "name": "defcpuloan",
      "type": "defcpuloan",
      "ricardian_contract": "# Action - `defcpuloan`\n\n## Description\n\nThe `defcpuloan` action allows an account to withdraw tokens from the fund of a specific CPU loan and adds them to REX fund.\n\nAs an authorized party I, {{ signer }}, wish to withdraw from the CPU loan fund identified by loan number {{ loan_num }} on the account {{ from }} in the amount of {{ amount }} and have those tokens allocated to the REX fund of {{ from }}.\n"
    },{
      "name": "defnetloan",
      "type": "defnetloan",
      "ricardian_contract": "# Action - `defnetloan`\n\n## Description\n\nThe `defnetloan` action allows an account to withdraw tokens from the fund of a specific Network loan and adds them to REX fund.\n\nAs an authorized party I, {{ signer }}, wish to withdraw from the Network loan fund identified by loan number {{ loan_num }} on the account {{ from }} in the amount of {{ amount }} and have those tokens allocated to the REX fund of {{ from }}.\n"
    },{
      "name": "delegatebw",
      "type": "delegatebw",
      "ricardian_contract": "# Action - `{{ delegatebw }}`\n\n## Description\n\nThe intent of the `{{ delegatebw }}` action is to stake tokens for bandwidth and/or CPU and optionally transfer ownership.\n\nAs an authorized party I {{ signer }} wish to stake {{ stake_cpu_quantity }} for CPU and {{ stake_net_quantity }} for bandwidth from the liquid tokens of {{ from }} for the use of delegatee {{ to }}. \n  \n    {{if transfer }}\n    \nIt is {{ transfer }} that I wish these tokens to become immediately owned by the delegatee.\n \n    {{/if}}\n\nAs signer I stipulate that, if I am not the beneficial owner of these tokens, I have proof that Iu2019ve been authorized to take this action by their beneficial owner(s). \n"
    },{
      "name": "deleteauth",
      "type": "deleteauth",
      "ricardian_contract": ""
    },{
      "name": "deposit",
      "type": "deposit",
      "ricardian_contract": "# Action - `deposit`\n\n## Description\n\nThe `deposit` action allows an account to deposit EOS tokens into REX fund by transfering from their liquid token balance.\n\nAs an authorized party I, {{ signer }}, wish to deposit {{ amount }} EOS tokens into the REX fund of the account {{ owner }} from the liquid token balance of {{ owner }}.\n"
    },{
      "name": "fundcpuloan",
      "type": "fundcpuloan",
      "ricardian_contract": "# Action - `fundcpuloan`\n\n## Description\n\nThe `fundcpuloan` action allows an account to transfer tokens from its REX fund to the fund of a specific CPU loan in order for those tokens to be used for loan renewal at the loan's expiry.\n\nAs an authorized party I, {{ signer }}, wish to transfer the amount of {{ payment }} tokens into the CPU loan fund of the loan identified by loan number {{ loan_num }} from the account {{ from }} to be used for loan renewal at the expiry of {{ loan_num }}.\n"
    },{
      "name": "fundnetloan",
      "type": "fundnetloan",
      "ricardian_contract": "# Action - `fundnetloan`\n\n## Description\n\nThe `fundnetloan` action allows an account to transfer tokens from its REX fund to the fund of a specific Network loan in order for those tokens to be used for loan renewal at the loan's expiry.\n\nAs an authorized party I, {{ signer }}, wish to transfer the amount of {{ payment }} tokens into the Network loan fund of the loan identified by loan number {{ loan_num }} from the account {{ from }} to be used for loan renewal at the expiry of {{ loan_num }}.\n"
    },{
      "name": "init",
      "type": "init",
      "ricardian_contract": ""
    },{
      "name": "linkauth",
      "type": "linkauth",
      "ricardian_contract": ""
    },{
      "name": "mvfrsavings",
      "type": "mvfrsavings",
      "ricardian_contract": "# Action - `mvfrsavings`\n\n## Description\n\nThe `mvfrsavings` action allows an account to move REX tokens from its savings bucket to a bucket with a maturity date that is 4 days after 00:00 UTC.\n\nAs an authorized party I, {{ signer }}, wish to move {{ rex }} tokens from the savings bucket of the account {{ owner }}. Those tokens shall become available to {{ owner }} 4 days from 00:00 UTC.\n"
    },{
      "name": "mvtosavings",
      "type": "mvtosavings",
      "ricardian_contract": "# Action - `mvtosavings`\n\n## Description\n\nThe `mvtosavings` action allows an account to move REX tokens into a savings bucket.\n\nAs an authorized party I, {{ signer }}, wish to move {{ rex }} tokens to a savings bucket associated to the account {{ owner }}. I acknowledge that those tokens will then be subject to any maturity restrictions described in the `mvfrsavings` action. \n"
    },{
      "name": "namelist",
      "type": "namelist",
      "ricardian_contract": ""
    },{
      "name": "newaccount",
      "type": "newaccount",
      "ricardian_contract": "# Action - `{{ newaccount }}`\n\n### Description\n\nThe `{{ newaccount }}` action creates a new account.\n\nAs an authorized party I {{ signer }} wish to exercise the authority of {{ creator }} to create a new account on this system named {{ name }} such that the new account's owner public key shall be {{ owner }} and the active public key shall be {{ active }}.\n"
    },{
      "name": "onblock",
      "type": "onblock",
      "ricardian_contract": ""
    },{
      "name": "onerror",
      "type": "onerror",
      "ricardian_contract": ""
    },{
      "name": "refund",
      "type": "refund",
      "ricardian_contract": "# Action - `{{ refund }}`\n\n### Description\n\nThe intent of the `{{ refund }}` action is to return previously unstaked tokens to an account after the unstaking period has elapsed. \n\nAs an authorized party I {{ signer }} wish to have the unstaked tokens of {{ owner }} returned.\n"
    },{
      "name": "regproducer",
      "type": "regproducer",
      "ricardian_contract": "# Action - `{{ regproducer }}`\n\n## Description\n\nThe intent of the `{{ regproducer }}` action is to register an account as a BP candidate.\n\nI, {{producer}}, hereby nominate myself for consideration as an elected block producer.\n\nIf {{producer}} is selected to produce blocks by the eosio contract, I will sign blocks with {{producer_key}} and I hereby attest that I will keep this key secret and secure.\n\nIf {{producer}} is unable to perform obligations under this contract I will resign my position by resubmitting this contract with the null producer key.\n\nI acknowledge that a block is 'objectively valid' if it conforms to the deterministic blockchain rules in force at the time of its creation, and is 'objectively invalid' if it fails to conform to those rules.\n\n{{producer}} hereby agrees to only use {{producer_key}} to sign messages under the following scenarios:\nproposing an objectively valid block at the time appointed by the block scheduling algorithm\npre-confirming a block produced by another producer in the schedule when I find said block objectively valid\nconfirming a block for which {{producer}} has received 2/3+ pre-confirmation messages from other producers\n\nI hereby accept liability for any and all provable damages that result from my:\nsigning two different block proposals with the same timestamp with {{producer_key}}\nsigning two different block proposals with the same block number with {{producer_key}}\nsigning any block proposal which builds off of an objectively invalid block\nsigning a pre-confirmation for an objectively invalid block\nsigning a confirmation for a block for which I do not possess pre-confirmation messages from 2/3+ other producers\n\nI hereby agree that double-signing for a timestamp or block number in concert with 2 or more other producers shall automatically be deemed malicious and subject to a fine equal to the past year of compensation received and imediate disqualification from being a producer, and other damages. An exception may be made if {{producer}} can demonstrate that the double-signing occured due to a bug in the reference software; the burden of proof is on {{producer}}.\n\nI hereby agree not to interfere with the producer election process. I agree to process all producer election transactions that occur in blocks I create, to sign all objectively valid blocks I create that contain election transactions, and to sign all pre-confirmations and confirmations necessary to facilitate transfer of control to the next set of producers as determined by the system contract.\n\nI hereby acknowledge that 2/3+ other elected producers may vote to disqualify {{producer}} in the event {{producer}} is unable to produce blocks or is unable to be reached, according to criteria agreed to among producers.\n\nIf {{producer}} qualifies for and chooses to collect compensation due to votes received, {{producer}} will provide a public endpoint allowing at least 100 peers to maintain synchronization with the blockchain and/or submit transactions to be included. {{producer}} shall maintain at least 1 validating node with full state and signature checking and shall report any objectively invalid blocks produced by the active block producers. Reporting shall be via a method to be agreed to among producers, said method and reports to be made public.\n\nThe community agrees to allow {{producer}} to authenticate peers as necessary to prevent abuse and denial of service attacks; however, {{producer}} agrees not to discriminate against non-abusive peers.\n\nI agree to process transactions on a FIFO best-effort basis and to honestly bill transactions for measured execution time.\n\nI {{producer}} agree not to manipulate the contents of blocks in order to derive profit from:\nthe order in which transactions are included\nthe hash of the block that is produced\n\nI, {{producer}}, hereby agree to disclose and attest under penalty of perjury all ultimate beneficial owners of my company who own more than 10% and all direct shareholders.\n\nI, {{producer}}, hereby agree to cooperate with other block producers to carry out our respective and mutual obligations under this agreement, including but not limited to maintaining network stability and a valid blockchain.\n\nI, {{producer}}, agree to maintain a website hosted at {{url}} which contains up-to-date information on all disclosures required by this contract.\n\nI, {{producer}}, agree to set {{location}} such that {{producer}} is scheduled with minimal latency between my previous and next peer.\n\nI, {{producer}}, agree to maintain time synchronization within 10 ms of global atomic clock time, using a method agreed to among producers.\n\nI, {{producer}}, agree not to produce blocks before my scheduled time unless I have received all blocks produced by the prior producer.\n\nI, {{producer}}, agree not to publish blocks with timestamps more than 500ms in the future unless the prior block is more than 75% full by either CPU or network bandwidth metrics.\n\nI, {{producer}}, agree not to set the RAM supply to more RAM than my nodes contain and to resign if I am unable to provide the RAM approved by 2/3+ producers, as shown in the system parameters.\n"
    },{
      "name": "regproxy",
      "type": "regproxy",
      "ricardian_contract": ""
    },{
      "name": "rentcpu",
      "type": "rentcpu",
      "ricardian_contract": "# Action - `rentcpu`\n\n## Description\n\nThe `rentcpu` action allows an account to rent CPU bandwidth for 30 days at a market-determined price.\n\nAs an authorized party I, {{ signer }}, wish to rent CPU bandwidth for 30 days for the use of the account {{ receiver }} in exchange for the loan payment of {{ loan_payment }}, which shall be taken from the account {{ from }}. The loan fund amount {{ loan_fund }} is set for automatic renewal of the loan at the expiry of said loan.\n\nThe amount of CPU bandwidth shall be determined by the market at time of loan execution and shall be recalculated at time of renewal, should I wish to automatically renew the loan at that time. I acknowledge that the amount of CPU bandwidth received in exchange of {{ loan_payment }} for the benefit of {{ receiver }} at loan renewal may be different from the current amount of bandwidth received. \n"
    },{
      "name": "rentnet",
      "type": "rentnet",
      "ricardian_contract": "# Action - `rentnet`\n\n## Description\n\nThe `rentnet` action allows an account to rent Network bandwidth for 30 days at a market-determined price.\n\nAs an authorized party I, {{ signer }}, wish to rent Network bandwidth for 30 days for the use of the account {{ receiver }} in exchange for the loan payment of {{ loan_payment }}, which shall be taken from the account {{ from }}. The loan fund amount {{ loan_fund }} is set for automatic renewal of the loan at the expiry of said loan.\n\nThe amount of Network bandwidth shall be determined by the market at time of loan execution and shall be recalculated at time of renewal, should I wish to automatically renew the loan at that time. I acknowledge that the amount of Network bandwidth received in exchange of {{ loan_payment }} for the benefit of {{ receiver }} at loan renewal may be different from the current amount of bandwidth received. \n"
    },{
      "name": "rexexec",
      "type": "rexexec",
      "ricardian_contract": "# Action - `rexexec`\n\n## Description\n\nThe `rexexec` action allows any account to perform REX maintenance by processing expired loans and unfilled sell orders.\n\nI, {{ signer }}, wish to process up to {{ max }} of any CPU loans, Network loans, and sell orders that may currently be pending.\n"
    },{
      "name": "rmvproducer",
      "type": "rmvproducer",
      "ricardian_contract": ""
    },{
      "name": "sellram",
      "type": "sellram",
      "ricardian_contract": "# Action - `{{ sellram }}`\n\n## Description\n\nThe `{{ sellram }}` action sells unused RAM for tokens.\n\nAs an authorized party I {{ signer }} wish to sell {{ bytes }} of unused RAM from account {{ account }}. \n"
    },{
      "name": "sellrex",
      "type": "sellrex",
      "ricardian_contract": "# Action - `sellrex`\n\n## Description\n\nThe `sellrex` action allows an account to sell REX tokens held by the account.\n\nAs an authorized party I, {{ signer }}, wish to sell {{ rex }} REX tokens held on the account {{ from }} in exchange for core EOS tokens. If there is an insufficient amount of EOS tokens available at this time, I acknowledge that my order will be placed in a queue to be processed. \n\nIf there is an open `sellrex` order for the account {{ from }}, then this amount of {{ rex }} REX shall be added to the existing order and the order shall move to the back of the queue. \n"
    },{
      "name": "setabi",
      "type": "setabi",
      "ricardian_contract": ""
    },{
      "name": "setacctcpu",
      "type": "setacctcpu",
      "ricardian_contract": ""
    },{
      "name": "setacctnet",
      "type": "setacctnet",
      "ricardian_contract": ""
    },{
      "name": "setacctram",
      "type": "setacctram",
      "ricardian_contract": ""
    },{
      "name": "setalimits",
      "type": "setalimits",
      "ricardian_contract": ""
    },{
      "name": "setcode",
      "type": "setcode",
      "ricardian_contract": ""
    },{
      "name": "setguaminres",
      "type": "setguaminres",
      "ricardian_contract": ""
    },{
      "name": "setparams",
      "type": "setparams",
      "ricardian_contract": ""
    },{
      "name": "setpriv",
      "type": "setpriv",
      "ricardian_contract": ""
    },{
      "name": "setram",
      "type": "setram",
      "ricardian_contract": ""
    },{
      "name": "setramrate",
      "type": "setramrate",
      "ricardian_contract": ""
    },{
      "name": "setrex",
      "type": "setrex",
      "ricardian_contract": ""
    },{
      "name": "undelegatebw",
      "type": "undelegatebw",
      "ricardian_contract": "# Action - `{{ undelegatebw }}`\n\n## Description\n\nThe intent of the `{{ undelegatebw }}` action is to unstake tokens from CPU and/or bandwidth. \n\nAs an authorized party I {{ signer }} wish to unstake {{ unstake_cpu_quantity }} from CPU and {{ unstake_net_quantity }} from bandwidth from the tokens owned by {{ from }} previously delegated for the use of delegatee {{ to }}. \n\nIf I as signer am not the beneficial owner of these tokens I stipulate I have proof that Iu2019ve been authorized to take this action by their beneficial owner(s). \n"
    },{
      "name": "unlinkauth",
      "type": "unlinkauth",
      "ricardian_contract": ""
    },{
      "name": "unregprod",
      "type": "unregprod",
      "ricardian_contract": "# Action - `{{ unregprod }}`\n\n## Description\n\nThe `{{ unregprod }}` action unregisters a previously registered block producer candidate.\n\nAs an authorized party I {{ signer }} wish to unregister the block producer candidate {{ producer }}, rendering that candidate no longer able to receive votes.\n"
    },{
      "name": "unstaketorex",
      "type": "unstaketorex",
      "ricardian_contract": "# Action - `unstaketorex`\n\n## Description\n\nThe `unstaketorex` action allows an account to buy REX using EOS tokens which are currently staked for either CPU or Network bandwidth.\n\nAs an authorized party I, {{ signer }}, wish to buy REX tokens by unstaking {{ from_cpu }} EOS from CPU bandwidth and {{ from_net }} EOS from Network bandwidth from account {{ owner }} that are staked to account {{ receiver }}.\n\nI am aware of, and have fulfilled, all voting requirements needed to participate in the REX marketplace.\n"
    },{
      "name": "updateauth",
      "type": "updateauth",
      "ricardian_contract": ""
    },{
      "name": "updaterex",
      "type": "updaterex",
      "ricardian_contract": "# Action - `updaterex`\n\n## Description\n\nThe `updaterex` action allows an account to update its vote weight.\n\nAs an authorized party I, {{ signer }}, wish to update the REX vote stake and vote weight of the account {{ owner }}.\n"
    },{
      "name": "updtrevision",
      "type": "updtrevision",
      "ricardian_contract": ""
    },{
      "name": "voteproducer",
      "type": "voteproducer",
      "ricardian_contract": "# Action - `{{ voteproducer }}`\n\n## Description\n\nThe intent of the `{{ voteproducer }}` action is to cast a valid vote for up to 30 BP candidates. \n\nAs an authorized party I {{ signer }} wish to vote on behalf of {{ voter }} in favor of the block producer candidates {{ producers }} with a voting weight equal to all tokens currently owned by {{ voter }} and staked for CPU or bandwidth. \n\nIf I am not the beneficial owner of these shares I stipulate I have proof that Iu2019ve been authorized to vote these shares by their beneficial owner(s). \n\nI stipulate I have not and will not accept anything of value in exchange for these votes, on penalty of confiscation of these tokens, and other penalties. \n\nI acknowledge that using any system of automatic voting, re-voting, or vote refreshing, or allowing such a system to be used on my behalf or on behalf of another, is forbidden and doing so violates this contract.\n"
    },{
      "name": "withdraw",
      "type": "withdraw",
      "ricardian_contract": "# Action - `withdraw`\n\n## Description\n\nThe `withdraw` action allows an account to withdraw EOS tokens from their REX fund into their liquid token balance.\n\nAs an authorized party I, {{ signer }}, wish to withdraw {{ amount }} of EOS tokens from the REX fund for the account {{ owner }} into its liquid token balance.\n"
    }
  ],
  "tables": [{
      "name": "abihash",
      "index_type": "i64",
      "key_names": [],
      "key_types": [],
      "type": "abi_hash"
    },{
      "name": "bidrefunds",
      "index_type": "i64",
      "key_names": [],
      "key_types": [],
      "type": "bid_refund"
    },{
      "name": "cpuloan",
      "index_type": "i64",
      "key_names": [],
      "key_types": [],
      "type": "rex_loan"
    },{
      "name": "delband",
      "index_type": "i64",
      "key_names": [],
      "key_types": [],
      "type": "delegated_bandwidth"
    },{
      "name": "global",
      "index_type": "i64",
      "key_names": [],
      "key_types": [],
      "type": "eosio_global_state"
    },{
      "name": "global2",
      "index_type": "i64",
      "key_names": [],
      "key_types": [],
      "type": "eosio_global_state2"
    },{
      "name": "global3",
      "index_type": "i64",
      "key_names": [],
      "key_types": [],
      "type": "eosio_global_state3"
    },{
      "name": "guaranminres",
      "index_type": "i64",
      "key_names": [],
      "key_types": [],
      "type": "eosio_guaranteed_min_res"
    },{
      "name": "namebids",
      "index_type": "i64",
      "key_names": [],
      "key_types": [],
      "type": "name_bid"
    },{
      "name": "netloan",
      "index_type": "i64",
      "key_names": [],
      "key_types": [],
      "type": "rex_loan"
    },{
      "name": "producers",
      "index_type": "i64",
      "key_names": [],
      "key_types": [],
      "type": "producer_info"
    },{
      "name": "producers2",
      "index_type": "i64",
      "key_names": [],
      "key_types": [],
      "type": "producer_info2"
    },{
      "name": "rammarket",
      "index_type": "i64",
      "key_names": [],
      "key_types": [],
      "type": "exchange_state"
    },{
      "name": "refunds",
      "index_type": "i64",
      "key_names": [],
      "key_types": [],
      "type": "refund_request"
    },{
      "name": "rexbal",
      "index_type": "i64",
      "key_names": [],
      "key_types": [],
      "type": "rex_balance"
    },{
      "name": "rexfund",
      "index_type": "i64",
      "key_names": [],
      "key_types": [],
      "type": "rex_fund"
    },{
      "name": "rexpool",
      "index_type": "i64",
      "key_names": [],
      "key_types": [],
      "type": "rex_pool"
    },{
      "name": "rexqueue",
      "index_type": "i64",
      "key_names": [],
      "key_types": [],
      "type": "rex_order"
    },{
      "name": "userres",
      "index_type": "i64",
      "key_names": [],
      "key_types": [],
      "type": "user_resources"
    },{
      "name": "voters",
      "index_type": "i64",
      "key_names": [],
      "key_types": [],
      "type": "voter_info"
    }
  ],
  "ricardian_clauses": [],
  "error_messages": [],
  "abi_extensions": [],
  "variants": []
}
